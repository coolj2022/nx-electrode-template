import React from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import { ErrorFallback } from '../../components/ErrorFallback';
import { Body, Button, Heading } from '@walmart-web/livingdesign-components';
import { errorHandler } from '../../../helpers/utils';

function Bomb() {
  throw new Error(' CABOOM ');
  return <></>;
}

const Logging = () => {
  const [explode, setExplode] = React.useState(false);

  return (
    <ErrorBoundary
      FallbackComponent={ErrorFallback}
      onError={errorHandler}
      onReset={() => setExplode(false)}
    >
      <div
        style={{
          textAlign: 'center',
          background: '#efefef',
          padding: '25px',
          margin: '50px',
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'space-evenly',
          height: '100%',
        }}
      >
        {explode ? <Bomb /> : null}
        <Heading>Telemetry - UI Logging</Heading>
        <Body>
          This logger is only for use in React UI jsx code. It offers logging support to UI code
          executed either on the browser or the server (SSR). The same has been already setup so in
          order to use you can check the errorHandler function. More documentation can be found here{' '}
          <a
            href='https://gecgithub01.walmart.com/pages/electrode/docs/ui-logger'
            target='_blank'
            rel='noreferrer'
          >
            here
          </a>
          . To check the error object being sent it can be checked in the network tab.
        </Body>
        <div>
          <Button
            variant='destructive'
            onClick={() => {
              setExplode(true);
            }}
          >
            Click here to Force Error
          </Button>
        </div>
      </div>
    </ErrorBoundary>
  );
};
export default Logging;
